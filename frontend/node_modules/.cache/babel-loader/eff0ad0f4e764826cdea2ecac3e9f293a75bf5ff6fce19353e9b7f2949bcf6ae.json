{"ast":null,"code":"var _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState();\n  function createUser() {\n    let postObject = {\n      name: \"Katie Dinh\",\n      emails: \"ikatiedinh@gmail.com\",\n      text: \"oh god\",\n      date: new Date()\n    };\n  }\n  /*useEffect(() => {\r\n    async function getData() {\r\n      const response = await axios.get(\"http://localhost:3000/testing/6732e50ba7a10a8d1810d264\")\r\n        if (response.status === 200) { //If data fetch was successful\r\n        setData(response.data)\r\n      }\r\n    }\r\n      getData()\r\n  }, [])*/ //Empty dependency array means this only runs on first launch.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: JSON.stringify(data)\n  }, void 0, false);\n}\n_s(App, \"lif/WApPZI6pT1W4YSJwxeyij3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","axios","Fragment","_Fragment","jsxDEV","_jsxDEV","App","_s","data","setData","createUser","postObject","name","emails","text","date","Date","children","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/kryst/35LProj/groupfinder/frontend/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react'\r\nimport axios from \"axios\"\r\n\r\nfunction App() {\r\n\r\n  const [data, setData] = useState()\r\n\r\n    function createUser() {\r\n      let postObject = {\r\n        name: \"Katie Dinh\",\r\n        emails: \"ikatiedinh@gmail.com\",\r\n        text: \"oh god\",\r\n        date: new Date()\r\n      }\r\n    }\r\n  /*useEffect(() => {\r\n    async function getData() {\r\n      const response = await axios.get(\"http://localhost:3000/testing/6732e50ba7a10a8d1810d264\")\r\n\r\n      if (response.status === 200) { //If data fetch was successful\r\n        setData(response.data)\r\n      }\r\n    }\r\n\r\n    getData()\r\n  }, [])*/ //Empty dependency array means this only runs on first launch.\r\n  return (\r\n    <>\r\n      {JSON.stringify(data)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA;AACA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAEhC,SAASW,UAAUA,CAAA,EAAG;IACpB,IAAIC,UAAU,GAAG;MACfC,IAAI,EAAE,YAAY;MAClBC,MAAM,EAAE,sBAAsB;MAC9BC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE,IAAIC,IAAI,CAAC;IACjB,CAAC;EACH;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UARE,CAUS;EACT,oBACEX,OAAA,CAAAF,SAAA;IAAAc,QAAA,EACGC,IAAI,CAACC,SAAS,CAACX,IAAI;EAAC,gBACrB,CAAC;AAEP;AAACD,EAAA,CA5BQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}